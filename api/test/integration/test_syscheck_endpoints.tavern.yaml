---
test_name: GET /syscheck/{agent_id}

includes:
  - !include common.yaml

stages:
    # Authentication stage
  - type: ref
    id: login_get_token

    # GET /syscheck/000
  - name: Try to get syscheck scan results for agent 000
    request: &get_syscheck_agent
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/syscheck/000"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        # We get totalItems number of arrays in items, using !anything to check items key is in the response
        items: !anything
        totalItems: !anyint

    # GET /syscheck/000?limit=1
  - name: Try to get syscheck scan results for agent 000 with a set limit of 1 answer
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
    response:
      status_code: 200
      body:
        # We define this answer as a common one array full answer
        items: &full_items_array
          - attributes: !anyint
            date: !anystr
            file: !anystr
            gid: !anystr
            gname: !anystr
            inode: !anyint
            md5: !anystr
            mtime: !anystr
            perm: !anystr
            sha1: !anystr
            sha256: !anystr
            size: !anyint
            type: !anystr
            uid: !anystr
            uname: !anystr
        totalItems: !anyint
      # Save some data for future use in the test
      save:
        body:
          returned_file: items.0.file
          returned_md5: items.0.md5
          returned_sha1: items.0.sha1
          returned_sha256: items.0.sha256
          returned_total: totalItems

    # GET /syscheck/000?limit=1&summary=True
  - name: Try to get limited syscheck scan results for agent 000 using summarize parameter
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        summary: True
    response:
      status_code: 200
      body:
        items:
          - date: !anystr
            file: !anystr
            mtime: !anystr
        totalItems: !anyint

    # We implement a dual stage to check offset parameter behaviour
    # GET /syscheck/000?limit=2&offset=0
  - name: Try to get syscheck scan results for agent 000 using limit and offset parameter
    request:
      <<: *get_syscheck_agent
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      body:
        items:
          - <<: *full_items_array
          - <<: *full_items_array
        totalItems: !anyint
      # Save second item to check offset in next stage
      save:
        body:
          offset_item: items.1

    # GET /syscheck/000?limit=1&offset=1
  - name: Try to get syscheck scan results for agent 000 using limit and offset parameter
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      body:
        items:
            # Save second item to check offset in next stage
          - attributes: !int "{offset_item.attributes}"
            date: "{offset_item.date}"
            file: "{offset_item.file}"
            gid: "{offset_item.gid}"
            gname: "{offset_item.gname}"
            inode: !int "{offset_item.inode}"
            md5: "{offset_item.md5}"
            mtime: "{offset_item.mtime}"
            perm: "{offset_item.perm}"
            sha1: "{offset_item.sha1}"
            sha256: "{offset_item.sha256}"
            size: !int "{offset_item.size}"
            type: "{offset_item.type}"
            uid: "{offset_item.uid}"
            uname: "{offset_item.uname}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&search=a
  - name: Try to get limited syscheck scan results for agent 000 using search parameter
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        search: a
    response:
      status_code: 200
      body:
        items: *full_items_array
        totalItems: !anyint

    # GET /syscheck/000?limit=1&type=file
  - name: Try to get limited syscheck scan results for agent 000 using type filtering (file)
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        type: file
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

    # GET /syscheck/000?limit=1&type=registry
  - name: Try to get limited syscheck scan results for agent 000 using type filtering (registry)
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        type: registry
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

    # GET /syscheck/000?limit=1&type=wrongparam
  - name: Try to get limited syscheck scan results for agent 000 using a wrong filter
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        type: wrongparam
    response:
      status_code: 400

    # GET /syscheck/000?limit=1&md5=returned_md5
  - name: Try to get limited syscheck scan results for agent 000 using md5 filtering
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        md5: "{returned_md5:s}"
    response:
      status_code: 200
      body:
        items:
          - md5: "{tavern.request_vars.params.md5}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&sha1=returned_sha1
  - name: Try to get limited syscheck scan results for agent 000 using sha1 filtering
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        sha1: "{returned_sha1:s}"
    response:
      status_code: 200
      body:
        items:
          - sha1: "{tavern.request_vars.params.sha1}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&sha256=returned_sha256
  - name: Try to get limited syscheck scan results for agent 000 using sha256 filtering
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        sha256: "{returned_sha256:s}"
    response:
      status_code: 200
      body:
        items:
          - sha256: "{tavern.request_vars.params.sha256}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&hash=returned_md5
  - name: Try to get limited syscheck scan results for agent 000 using hash filtering (md5)
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        hash: "{returned_md5:s}"
    response:
      status_code: 200
      body:
        items:
          - md5: "{tavern.request_vars.params.hash}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&hash=returned_sha1
  - name: Try to get limited syscheck scan results for agent 000 using hash filtering (sha1)
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        hash: "{returned_sha1:s}"
    response:
      status_code: 200
      body:
        items:
          - sha1: "{tavern.request_vars.params.hash}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&hash=returned_sha256
  - name: Try to get limited syscheck scan results for agent 000 using hash filtering (sha256)
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        hash: "{returned_sha256:s}"
    response:
      status_code: 200
      body:
        items:
          - sha256: "{tavern.request_vars.params.hash}"
        totalItems: !anyint

    # GET /syscheck/000?limit=1&file=returned_file
  - name: Try to get limited syscheck scan results for agent 000 using filename filtering
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        file: "{returned_file:s}"
    response:
      status_code: 200
      body:
        items:
          - file: "{tavern.request_vars.params.file}"
        totalItems: !anyint

    # We implement a dual stage to check sort parameter behaviour
    # GET /syscheck/000?limit=2&sort=size
  - name: Try to get syscheck scan results for agent 000 using limit and sort ascending filtering
    request:
      <<: *get_syscheck_agent
      params:
        limit: 2
        sort: size,date
    response:
      status_code: 200
      body:
        items:
          - <<: *full_items_array
          - <<: *full_items_array
        totalItems: !anyint
      save:
        $ext:
          function: tavern_utils:calc_offset
          extra_kwargs:
            total: "{returned_total}"
        body:
          sort_item: items.0

    # GET /syscheck/000?limit=1&file=returned_file
  - name: Try to get syscheck scan results for agent 000 using limit and sort descending filtering
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        sort: -size,date
        offset: "{sort_offset:s}"
    response:
      status_code: 200
      body:
        items:
          - attributes: !int "{sort_item.attributes}"
            date: "{sort_item.date}"
            file: "{sort_item.file}"
            gid: "{sort_item.gid}"
            gname: "{sort_item.gname}"
            inode: !int "{sort_item.inode}"
            md5: "{sort_item.md5}"
            mtime: "{sort_item.mtime}"
            perm: "{sort_item.perm}"
            sha1: "{sort_item.sha1}"
            sha256: "{sort_item.sha256}"
            size: !int "{sort_item.size}"
            type: "{sort_item.type}"
            uid: "{sort_item.uid}"
            uname: "{sort_item.uname}"
        totalItems: !anyint

---
# Another GET /syscheck/{agent_id} test to parametrize values for sort and select parameters
test_name: GET /syscheck/{agent_id}

marks:
  - parametrize:
      key: field
      vals:
        - date
        - mtime
        - file
        - size
        - perm
        - uname
        - gname
        - md5
        - sha1
        - sha256
        - inode
        - gid
        - uid
        - type

stages:
    # GET /syscheck/000?limit=1&sort={field}
  - name: Try to get syscheck scan results for agent 000 with a sorted field answer
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        sort: "{field}"
    response:
      status_code: 200
      body:
        items: *full_items_array
        totalItems: !anyint

    # GET /syscheck/000?limit=1&select={field}
  - name: Try to get syscheck scan results for agent 000 with a selected field answer
    request:
      <<: *get_syscheck_agent
      params:
        limit: 1
        select: "{field}"
    response:
      status_code: 200
      body:
        $ext:
          # Check response item keys are the selected keys
          function: tavern_utils:test_select_key
          extra_kwargs:
            select_key: "{field:s}"
        totalItems: !anyint

---
test_name: GET /syscheck/{agent_id}/last_scan

stages:
    # GET /syscheck/000/last_scan
  - name: Try to get when the last scan for agent 000 started and ended

    request:
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/syscheck/000/last_scan"
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        start: !anystr
        end: !anystr

---
test_name: DELETE /syscheck/{agent_id}

stages:
    # DELETE /syscheck/000
  - name: Try to delete syscheck scans in agent 000

    request:
      method: DELETE
      url: "{protocol:s}://{host:s}:{port:d}/syscheck/000"
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: "Syscheck database deleted"

---
test_name: PUT /syscheck

stages:
    # PUT /syscheck
  - name: Try to run a syscheck scan in all agents

    request:
      method: PUT
      url: "{protocol:s}://{host:s}:{port:d}/syscheck"
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: "Restarting Syscheck/Rootcheck on all agents"

---
test_name: PUT /syscheck/{agent_id}

stages:
    # PUT /syscheck/000
  - name: Try to run a syscheck scan in agent 000

    request:
      method: PUT
      url: "{protocol:s}://{host:s}:{port:d}/syscheck/000"
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: "Restarting Syscheck/Rootcheck locally"

---




